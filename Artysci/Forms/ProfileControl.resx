<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="Icon.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>